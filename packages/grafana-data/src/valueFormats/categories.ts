import { locale, scaledUnits, simpleCountUnit, toFixedUnit, ValueFormatCategory, stringFormater } from './valueFormats';
import {
  dateTimeAsIso,
  dateTimeAsIsoNoDateIfToday,
  dateTimeAsUS,
  dateTimeAsUSNoDateIfToday,
  getDateTimeAsLocalFormat,
  getDateTimeAsLocalFormatNoDateIfToday,
  dateTimeFromNow,
  toClockMilliseconds,
  toClockSeconds,
  toDays,
  toDurationInDaysHoursMinutesSeconds,
  toDurationInHoursMinutesSeconds,
  toDurationInMilliseconds,
  toDurationInSeconds,
  toHours,
  toMicroSeconds,
  toMilliSeconds,
  toMinutes,
  toNanoSeconds,
  toSeconds,
  toTimeTicks,
  dateTimeSystemFormatter,
} from './dateTimeFormatters';
import { toHex, sci, toHex0x, toPercent, toPercentUnit } from './arithmeticFormatters';
import { binaryPrefix, currency, SIPrefix } from './symbolFormatters';

export const getCategories = (): ValueFormatCategory[] => [
  {
    name: 'Misc',
    formats: [
      { name: 'rien', id: 'none', fn: toFixedUnit('') },
      { name: 'Caractères', id: 'string', fn: stringFormater },
      {
        name: 'Court',
        id: 'short',
        fn: scaledUnits(1000, ['', ' K', ' Mil', ' Bil', ' Tri', ' Quadr', ' Quint', ' Sext', ' Sept']),
      },
      { name: 'Pourcent (0-100)', id: 'percent', fn: toPercent },
      { name: 'Pourcent (0.0-1.0)', id: 'percentunit', fn: toPercentUnit },
      { name: 'Humidité (%H)', id: 'humidity', fn: toFixedUnit('%H') },
      { name: 'Décibel', id: 'dB', fn: toFixedUnit('dB') },
      { name: 'Hexadécimal (0x)', id: 'hex0x', fn: toHex0x },
      { name: 'Hexadécimal', id: 'hex', fn: toHex },
      { name: 'Notation scientifique', id: 'sci', fn: sci },
      { name: 'Formal locale', id: 'locale', fn: locale },
      { name: 'Pixels', id: 'pixel', fn: toFixedUnit('px') },
    ],
  },
  {
    name: 'Accélération',
    formats: [
      { name: 'Mètres/sec²', id: 'accMS2', fn: toFixedUnit('m/sec²') },
      { name: 'Pied/sec²', id: 'accFS2', fn: toFixedUnit('f/sec²') },
      { name: 'G', id: 'accG', fn: toFixedUnit('g') },
    ],
  },
  {
    name: 'Angle',
    formats: [
      { name: 'Degrées (°)', id: 'degree', fn: toFixedUnit('°') },
      { name: 'Radians', id: 'radian', fn: toFixedUnit('rad') },
      { name: 'Gradian', id: 'grad', fn: toFixedUnit('grad') },
      { name: 'Arc Minutes', id: 'arcmin', fn: toFixedUnit('arcmin') },
      { name: 'Arc Secondes', id: 'arcsec', fn: toFixedUnit('arcsec') },
    ],
  },
  {
    name: 'Area',
    formats: [
      { name: 'Mètres carré (m²)', id: 'areaM2', fn: toFixedUnit('m²') },
      { name: 'Pied carré (ft²)', id: 'areaF2', fn: toFixedUnit('ft²') },
      { name: 'Miles carré (mi²)', id: 'areaMI2', fn: toFixedUnit('mi²') },
    ],
  },
  {
    name: 'Calcul',
    formats: [
      { name: 'FLOP/s', id: 'flops', fn: SIPrefix('FLOPS') },
      { name: 'MFLOP/s', id: 'mflops', fn: SIPrefix('FLOPS', 2) },
      { name: 'GFLOP/s', id: 'gflops', fn: SIPrefix('FLOPS', 3) },
      { name: 'TFLOP/s', id: 'tflops', fn: SIPrefix('FLOPS', 4) },
      { name: 'PFLOP/s', id: 'pflops', fn: SIPrefix('FLOPS', 5) },
      { name: 'EFLOP/s', id: 'eflops', fn: SIPrefix('FLOPS', 6) },
      { name: 'ZFLOP/s', id: 'zflops', fn: SIPrefix('FLOPS', 7) },
      { name: 'YFLOP/s', id: 'yflops', fn: SIPrefix('FLOPS', 8) },
    ],
  },
  {
    name: 'Concentration',
    formats: [
      { name: 'parties par million (ppm)', id: 'ppm', fn: toFixedUnit('ppm') },
      { name: 'parties par milliard (ppb)', id: 'conppb', fn: toFixedUnit('ppb') },
      { name: 'nanogramme par mètre cube (ng/m³)', id: 'conngm3', fn: toFixedUnit('ng/m³') },
      { name: 'nanogramme par normo mètre cube (ng/Nm³)', id: 'conngNm3', fn: toFixedUnit('ng/Nm³') },
      { name: 'microgramme par mètre cube (μg/m³)', id: 'conμgm3', fn: toFixedUnit('μg/m³') },
      { name: 'microgramme par normo mètre cube (μg/Nm³)', id: 'conμgNm3', fn: toFixedUnit('μg/Nm³') },
      { name: 'milligramme par mètre cube (mg/m³)', id: 'conmgm3', fn: toFixedUnit('mg/m³') },
      { name: 'milligramme par normo mètre cube (mg/Nm³)', id: 'conmgNm3', fn: toFixedUnit('mg/Nm³') },
      { name: 'gramme par mètre cube (g/m³)', id: 'congm3', fn: toFixedUnit('g/m³') },
      { name: 'gramme par normo mètre cube (g/Nm³)', id: 'congNm3', fn: toFixedUnit('g/Nm³') },
      { name: 'milligrammes par décilitre (mg/dL)', id: 'conmgdL', fn: toFixedUnit('mg/dL') },
      { name: 'millimoles par litre (mmol/L)', id: 'conmmolL', fn: toFixedUnit('mmol/L') },
    ],
  },
  {
    name: 'Devise',
    formats: [
      { name: 'Dollars ($)', id: 'currencyUSD', fn: currency('$') },
      { name: 'Livres (£)', id: 'currencyGBP', fn: currency('£') },
      { name: 'Euro (€)', id: 'currencyEUR', fn: currency('€') },
      { name: 'Yen (¥)', id: 'currencyJPY', fn: currency('¥') },
      { name: 'Roubles (₽)', id: 'currencyRUB', fn: currency('₽') },
      { name: 'Hryvnias (₴)', id: 'currencyUAH', fn: currency('₴') },
      { name: 'Real (R$)', id: 'currencyBRL', fn: currency('R$') },
      { name: 'Couronne danoise (kr)', id: 'currencyDKK', fn: currency('kr', true) },
      { name: 'Couronne islandaise (kr)', id: 'currencyISK', fn: currency('kr', true) },
      { name: 'Couronne norvégienne (kr)', id: 'currencyNOK', fn: currency('kr', true) },
      { name: 'Couronne suédoise (kr)', id: 'currencySEK', fn: currency('kr', true) },
      { name: 'Couronne tchèque (czk)', id: 'currencyCZK', fn: currency('czk') },
      { name: 'Franc suisse (CHF)', id: 'currencyCHF', fn: currency('CHF') },
      { name: 'Zloty polonais (PLN)', id: 'currencyPLN', fn: currency('PLN') },
      { name: 'Bitcoin (฿)', id: 'currencyBTC', fn: currency('฿') },
      { name: 'Milli Bitcoin (฿)', id: 'currencymBTC', fn: currency('mBTC') },
      { name: 'Micro Bitcoin (฿)', id: 'currencyμBTC', fn: currency('μBTC') },
      { name: 'Rand sud-africain (R)', id: 'currencyZAR', fn: currency('R') },
      { name: 'Roupie indienne (₹)', id: 'currencyINR', fn: currency('₹') },
      { name: 'Won sud coréen (₩)', id: 'currencyKRW', fn: currency('₩') },
      { name: 'Roupie indonésienne (Rp)', id: 'currencyIDR', fn: currency('Rp') },
      { name: 'Peso Philippin (PHP)', id: 'currencyPHP', fn: currency('PHP') },
      { name: 'Dong vietnamien (VND)', id: 'currencyVND', fn: currency('đ', true) },
    ],
  },
  {
    name: 'Données',
    formats: [
      { name: 'bytes(IEC)', id: 'bytes', fn: binaryPrefix('B') },
      { name: 'bytes(SI)', id: 'decbytes', fn: SIPrefix('B') },
      { name: 'bits(IEC)', id: 'bits', fn: binaryPrefix('b') },
      { name: 'bits(SI)', id: 'decbits', fn: SIPrefix('b') },
      { name: 'kibibytes', id: 'kbytes', fn: binaryPrefix('B', 1) },
      { name: 'kilobytes', id: 'deckbytes', fn: SIPrefix('B', 1) },
      { name: 'mebibytes', id: 'mbytes', fn: binaryPrefix('B', 2) },
      { name: 'megabytes', id: 'decmbytes', fn: SIPrefix('B', 2) },
      { name: 'gibibytes', id: 'gbytes', fn: binaryPrefix('B', 3) },
      { name: 'gigabytes', id: 'decgbytes', fn: SIPrefix('B', 3) },
      { name: 'tebibytes', id: 'tbytes', fn: binaryPrefix('B', 4) },
      { name: 'terabytes', id: 'dectbytes', fn: SIPrefix('B', 4) },
      { name: 'pebibytes', id: 'pbytes', fn: binaryPrefix('B', 5) },
      { name: 'petabytes', id: 'decpbytes', fn: SIPrefix('B', 5) },
    ],
  },
  {
    name: 'Débit de données',
    formats: [
      { name: 'paquets/sec', id: 'pps', fn: SIPrefix('p/s') },
      { name: 'bytes/sec(IEC)', id: 'binBps', fn: binaryPrefix('B/s') },
      { name: 'bytes/sec(SI)', id: 'Bps', fn: SIPrefix('B/s') },
      { name: 'bits/sec(IEC)', id: 'binbps', fn: binaryPrefix('b/s') },
      { name: 'bits/sec(SI)', id: 'bps', fn: SIPrefix('b/s') },
      { name: 'kibibytes/sec', id: 'KiBs', fn: binaryPrefix('B/s', 1) },
      { name: 'kibibits/sec', id: 'Kibits', fn: binaryPrefix('b/s', 1) },
      { name: 'kilobytes/sec', id: 'KBs', fn: SIPrefix('B/s', 1) },
      { name: 'kilobits/sec', id: 'Kbits', fn: SIPrefix('b/s', 1) },
      { name: 'mibibytes/sec', id: 'MiBs', fn: binaryPrefix('B/s', 2) },
      { name: 'mibibits/sec', id: 'Mibits', fn: binaryPrefix('b/s', 2) },
      { name: 'megabytes/sec', id: 'MBs', fn: SIPrefix('B/s', 2) },
      { name: 'megabits/sec', id: 'Mbits', fn: SIPrefix('b/s', 2) },
      { name: 'gibibytes/sec', id: 'GiBs', fn: binaryPrefix('B/s', 3) },
      { name: 'gibibits/sec', id: 'Gibits', fn: binaryPrefix('b/s', 3) },
      { name: 'gigabytes/sec', id: 'GBs', fn: SIPrefix('B/s', 3) },
      { name: 'gigabits/sec', id: 'Gbits', fn: SIPrefix('b/s', 3) },
      { name: 'tebibytes/sec', id: 'TiBs', fn: binaryPrefix('B/s', 4) },
      { name: 'tebibits/sec', id: 'Tibits', fn: binaryPrefix('b/s', 4) },
      { name: 'terabytes/sec', id: 'TBs', fn: SIPrefix('B/s', 4) },
      { name: 'terabits/sec', id: 'Tbits', fn: SIPrefix('b/s', 4) },
      { name: 'petibytes/sec', id: 'PiBs', fn: binaryPrefix('B/s', 5) },
      { name: 'petibits/sec', id: 'Pibits', fn: binaryPrefix('b/s', 5) },
      { name: 'petabytes/sec', id: 'PBs', fn: SIPrefix('B/s', 5) },
      { name: 'petabits/sec', id: 'Pbits', fn: SIPrefix('b/s', 5) },
    ],
  },
  {
    name: 'Date et temps',
    formats: [
      { name: 'Datetime ISO', id: 'dateTimeAsIso', fn: dateTimeAsIso },
      { name: 'Datetime ISO (Rien si maintenant)', id: 'dateTimeAsIsoNoDateIfToday', fn: dateTimeAsIsoNoDateIfToday },
      { name: 'Datetime US', id: 'dateTimeAsUS', fn: dateTimeAsUS },
      { name: 'Datetime US (Rien si maintenant)', id: 'dateTimeAsUSNoDateIfToday', fn: dateTimeAsUSNoDateIfToday },
      { name: 'Datetime local', id: 'dateTimeAsLocal', fn: getDateTimeAsLocalFormat() },
      {
        name: 'Datetime locale (Rien si maintenant)',
        id: 'dateTimeAsLocalNoDateIfToday',
        fn: getDateTimeAsLocalFormatNoDateIfToday(),
      },
      { name: 'Datetime defaut', id: 'dateTimeAsSystem', fn: dateTimeSystemFormatter },
      { name: 'De maintenant', id: 'dateTimeFromNow', fn: dateTimeFromNow },
    ],
  },
  {
    name: 'Energie',
    formats: [
      { name: 'Watt (W)', id: 'watt', fn: SIPrefix('W') },
      { name: 'Kilowatt (kW)', id: 'kwatt', fn: SIPrefix('W', 1) },
      { name: 'Megawatt (MW)', id: 'megwatt', fn: SIPrefix('W', 2) },
      { name: 'Gigawatt (GW)', id: 'gwatt', fn: SIPrefix('W', 3) },
      { name: 'Milliwatt (mW)', id: 'mwatt', fn: SIPrefix('W', -1) },
      { name: 'Watt par mètre carré (W/m²)', id: 'Wm2', fn: toFixedUnit('W/m²') },
      { name: 'Volt-ampère (VA)', id: 'voltamp', fn: SIPrefix('VA') },
      { name: 'Kilovolt-ampère (kVA)', id: 'kvoltamp', fn: SIPrefix('VA', 1) },
      { name: 'Volt-ampère réactif (var)', id: 'voltampreact', fn: SIPrefix('var') },
      { name: 'Kilovolt-ampère réactif (kVAr)', id: 'kvoltampreact', fn: SIPrefix('VAr', 1) },
      { name: 'Watt-heure (Wh)', id: 'watth', fn: SIPrefix('Wh') },
      { name: 'Watt-heure par Kilogramme (Wh/kg)', id: 'watthperkg', fn: SIPrefix('Wh/kg') },
      { name: 'Kilowatt-heure (kWh)', id: 'kwatth', fn: SIPrefix('Wh', 1) },
      { name: 'Kilowatt-min (kWm)', id: 'kwattm', fn: SIPrefix('W-Min', 1) },
      { name: 'Ampère-heure (Ah)', id: 'amph', fn: SIPrefix('Ah') },
      { name: 'Kiloampère-heure (kAh)', id: 'kamph', fn: SIPrefix('Ah', 1) },
      { name: 'Milliampère-heure (mAh)', id: 'mamph', fn: SIPrefix('Ah', -1) },
      { name: 'Joule (J)', id: 'joule', fn: SIPrefix('J') },
      { name: 'Electron volt (eV)', id: 'ev', fn: SIPrefix('eV') },
      { name: 'Ampère (A)', id: 'amp', fn: SIPrefix('A') },
      { name: 'Kiloampère (kA)', id: 'kamp', fn: SIPrefix('A', 1) },
      { name: 'Milliampère (mA)', id: 'mamp', fn: SIPrefix('A', -1) },
      { name: 'Volt (V)', id: 'volt', fn: SIPrefix('V') },
      { name: 'Kilovolt (kV)', id: 'kvolt', fn: SIPrefix('V', 1) },
      { name: 'Millivolt (mV)', id: 'mvolt', fn: SIPrefix('V', -1) },
      { name: 'Décibel-milliwatt (dBm)', id: 'dBm', fn: SIPrefix('dBm') },
      { name: 'Ohm (Ω)', id: 'ohm', fn: SIPrefix('Ω') },
      { name: 'Kiloohm (kΩ)', id: 'kohm', fn: SIPrefix('Ω', 1) },
      { name: 'Megaohm (MΩ)', id: 'Mohm', fn: SIPrefix('Ω', 2) },
      { name: 'Farad (F)', id: 'farad', fn: SIPrefix('F') },
      { name: 'Microfarad (µF)', id: 'µfarad', fn: SIPrefix('F', -2) },
      { name: 'Nanofarad (nF)', id: 'nfarad', fn: SIPrefix('F', -3) },
      { name: 'Picofarad (pF)', id: 'pfarad', fn: SIPrefix('F', -4) },
      { name: 'Femtofarad (fF)', id: 'ffarad', fn: SIPrefix('F', -5) },
      { name: 'Henry (H)', id: 'henry', fn: SIPrefix('H') },
      { name: 'Millihenry (mH)', id: 'mhenry', fn: SIPrefix('H', -1) },
      { name: 'Microhenry (µH)', id: 'µhenry', fn: SIPrefix('H', -2) },
      { name: 'Lumens (Lm)', id: 'lumens', fn: SIPrefix('Lm') },
    ],
  },
  {
    name: 'Flux',
    formats: [
      { name: 'Gallons/min (gpm)', id: 'flowgpm', fn: toFixedUnit('gpm') },
      { name: 'Mètre cube/sec (cms)', id: 'flowcms', fn: toFixedUnit('cms') },
      { name: 'Pieds cube/sec (cfs)', id: 'flowcfs', fn: toFixedUnit('cfs') },
      { name: 'Pieds cube/min (cfm)', id: 'flowcfm', fn: toFixedUnit('cfm') },
      { name: 'Litre/heure', id: 'litreh', fn: toFixedUnit('L/h') },
      { name: 'Litre/min (L/min)', id: 'flowlpm', fn: toFixedUnit('L/min') },
      { name: 'milliLitre/min (mL/min)', id: 'flowmlpm', fn: toFixedUnit('mL/min') },
      { name: 'Lux (lx)', id: 'lux', fn: toFixedUnit('lux') },
    ],
  },
  {
    name: 'Force',
    formats: [
      { name: 'Newton-mètres (Nm)', id: 'forceNm', fn: SIPrefix('Nm') },
      { name: 'Kilonewton-mètres (kNm)', id: 'forcekNm', fn: SIPrefix('Nm', 1) },
      { name: 'Newtons (N)', id: 'forceN', fn: SIPrefix('N') },
      { name: 'Kilonewtons (kN)', id: 'forcekN', fn: SIPrefix('N', 1) },
    ],
  },
  {
    name: 'Taux de hachage',
    formats: [
      { name: 'hashes/sec', id: 'Hs', fn: SIPrefix('H/s') },
      { name: 'kilohashes/sec', id: 'KHs', fn: SIPrefix('H/s', 1) },
      { name: 'megahashes/sec', id: 'MHs', fn: SIPrefix('H/s', 2) },
      { name: 'gigahashes/sec', id: 'GHs', fn: SIPrefix('H/s', 3) },
      { name: 'terahashes/sec', id: 'THs', fn: SIPrefix('H/s', 4) },
      { name: 'petahashes/sec', id: 'PHs', fn: SIPrefix('H/s', 5) },
      { name: 'exahashes/sec', id: 'EHs', fn: SIPrefix('H/s', 6) },
    ],
  },
  {
    name: 'Masse',
    formats: [
      { name: 'milligramme (mg)', id: 'massmg', fn: SIPrefix('g', -1) },
      { name: 'gramme (g)', id: 'massg', fn: SIPrefix('g') },
      { name: 'kilogramme (kg)', id: 'masskg', fn: SIPrefix('g', 1) },
      { name: 'Tonne (t)', id: 'masst', fn: toFixedUnit('t') },
    ],
  },
  {
    name: 'Longueur',
    formats: [
      { name: 'millimètre (mm)', id: 'lengthmm', fn: SIPrefix('m', -1) },
      { name: 'Pieds (ft)', id: 'lengthft', fn: toFixedUnit('ft') },
      { name: 'Mètre (m)', id: 'lengthm', fn: SIPrefix('m') },
      { name: 'Kilomètre (km)', id: 'lengthkm', fn: SIPrefix('m', 1) },
      { name: 'Mile (mi)', id: 'lengthmi', fn: toFixedUnit('mi') },
    ],
  },
  {
    name: 'Pression',
    formats: [
      { name: 'Millibars', id: 'pressurembar', fn: SIPrefix('bar', -1) },
      { name: 'Bars', id: 'pressurebar', fn: SIPrefix('bar') },
      { name: 'Kilobars', id: 'pressurekbar', fn: SIPrefix('bar', 1) },
      { name: 'Pascals', id: 'pressurepa', fn: SIPrefix('Pa') },
      { name: 'Hectopascals', id: 'pressurehpa', fn: toFixedUnit('hPa') },
      { name: 'Kilopascals', id: 'pressurekpa', fn: toFixedUnit('kPa') },
      { name: 'Pouces de mercure', id: 'pressurehg', fn: toFixedUnit('"Hg') },
      { name: 'PSI', id: 'pressurepsi', fn: scaledUnits(1000, ['psi', 'ksi', 'Mpsi']) },
    ],
  },
  {
    name: 'Radiation',
    formats: [
      { name: 'Becquerel (Bq)', id: 'radbq', fn: SIPrefix('Bq') },
      { name: 'curie (Ci)', id: 'radci', fn: SIPrefix('Ci') },
      { name: 'Gray (Gy)', id: 'radgy', fn: SIPrefix('Gy') },
      { name: 'rad', id: 'radrad', fn: SIPrefix('rad') },
      { name: 'Sievert (Sv)', id: 'radsv', fn: SIPrefix('Sv') },
      { name: 'milliSievert (mSv)', id: 'radmsv', fn: SIPrefix('Sv', -1) },
      { name: 'microSievert (µSv)', id: 'radusv', fn: SIPrefix('Sv', -2) },
      { name: 'rem', id: 'radrem', fn: SIPrefix('rem') },
      { name: 'Exposure (C/kg)', id: 'radexpckg', fn: SIPrefix('C/kg') },
      { name: 'roentgen (R)', id: 'radr', fn: SIPrefix('R') },
      { name: 'Sievert/hour (Sv/h)', id: 'radsvh', fn: SIPrefix('Sv/h') },
      { name: 'milliSievert/hour (mSv/h)', id: 'radmsvh', fn: SIPrefix('Sv/h', -1) },
      { name: 'microSievert/hour (µSv/h)', id: 'radusvh', fn: SIPrefix('Sv/h', -2) },
    ],
  },
  {
    name: 'Vitesse de rotation',
    formats: [
      { name: 'Tour par minute (rpm)', id: 'rotrpm', fn: toFixedUnit('rpm') },
      { name: 'Hertz (Hz)', id: 'rothz', fn: SIPrefix('Hz') },
      { name: 'Radians par seconde (rad/s)', id: 'rotrads', fn: toFixedUnit('rad/s') },
      { name: 'Degrées par secondes (°/s)', id: 'rotdegs', fn: toFixedUnit('°/s') },
    ],
  },
  {
    name: 'Température',
    formats: [
      { name: 'Celsius (°C)', id: 'celsius', fn: toFixedUnit('°C') },
      { name: 'Fahrenheit (°F)', id: 'fahrenheit', fn: toFixedUnit('°F') },
      { name: 'Kelvin (K)', id: 'kelvin', fn: toFixedUnit('K') },
    ],
  },
  {
    name: 'Temps',
    formats: [
      { name: 'Hertz (1/s)', id: 'hertz', fn: SIPrefix('Hz') },
      { name: 'nanosecondes (ns)', id: 'ns', fn: toNanoSeconds },
      { name: 'microsecondes (µs)', id: 'µs', fn: toMicroSeconds },
      { name: 'millisecondes (ms)', id: 'ms', fn: toMilliSeconds },
      { name: 'secondes (s)', id: 's', fn: toSeconds },
      { name: 'minutes (m)', id: 'm', fn: toMinutes },
      { name: 'heures (h)', id: 'h', fn: toHours },
      { name: 'jours (d)', id: 'd', fn: toDays },
      { name: 'durée (ms)', id: 'dtdurationms', fn: toDurationInMilliseconds },
      { name: 'durée (s)', id: 'dtdurations', fn: toDurationInSeconds },
      { name: 'durée (hh:mm:ss)', id: 'dthms', fn: toDurationInHoursMinutesSeconds },
      { name: 'durée (d hh:mm:ss)', id: 'dtdhms', fn: toDurationInDaysHoursMinutesSeconds },
      { name: 'temps ticks (s/100)', id: 'timeticks', fn: toTimeTicks },
      { name: 'horloge (ms)', id: 'clockms', fn: toClockMilliseconds },
      { name: 'horloge (s)', id: 'clocks', fn: toClockSeconds },
    ],
  },
  {
    name: 'Débit',
    formats: [
      { name: 'comptes/sec (cps)', id: 'cps', fn: simpleCountUnit('c/s') },
      { name: 'ops/sec (ops)', id: 'ops', fn: simpleCountUnit('ops/s') },
      { name: 'requêtes/sec (rps)', id: 'reqps', fn: simpleCountUnit('req/s') },
      { name: 'lectures/sec (rps)', id: 'rps', fn: simpleCountUnit('rd/s') },
      { name: 'ecritures/sec (wps)', id: 'wps', fn: simpleCountUnit('wr/s') },
      { name: 'I/O ops/sec (iops)', id: 'iops', fn: simpleCountUnit('io/s') },
      { name: 'comptes/min (cpm)', id: 'cpm', fn: simpleCountUnit('c/m') },
      { name: 'ops/min (opm)', id: 'opm', fn: simpleCountUnit('ops/m') },
      { name: 'lectures/min (rpm)', id: 'rpm', fn: simpleCountUnit('rd/m') },
      { name: 'ecritures/min (wpm)', id: 'wpm', fn: simpleCountUnit('wr/m') },
    ],
  },
  {
    name: 'Vélocité',
    formats: [
      { name: 'mètres/seconde (m/s)', id: 'velocityms', fn: toFixedUnit('m/s') },
      { name: 'kilomètres/heure (km/h)', id: 'velocitykmh', fn: toFixedUnit('km/h') },
      { name: 'miles/heure (mph)', id: 'velocitymph', fn: toFixedUnit('mph') },
      { name: 'Noeud (kn)', id: 'velocityknot', fn: toFixedUnit('kn') },
    ],
  },
  {
    name: 'Volume',
    formats: [
      { name: 'millilitre (mL)', id: 'mlitre', fn: SIPrefix('L', -1) },
      { name: 'litre (L)', id: 'litre', fn: SIPrefix('L') },
      { name: 'mètre cube', id: 'm3', fn: toFixedUnit('m³') },
      { name: 'normo mètre cube', id: 'Nm3', fn: toFixedUnit('Nm³') },
      { name: 'décimètre cube', id: 'dm3', fn: toFixedUnit('dm³') },
      { name: 'gallons', id: 'gallons', fn: toFixedUnit('gal') },
    ],
  },
];
